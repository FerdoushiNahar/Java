## **Summary of the Collection Interface in Java**

The **Collection Interface** is the fundamental interface of the Java Collections Framework, providing methods to manage and manipulate a group of objects.

---

### **Key Features of Collection Interface**
- **Models a Collection**: Allows storing and retrieving elements.
- **Generic Implementation**: Can be used with different data types.
- **Implemented by Various Classes**: `ArrayList`, `HashSet`, `LinkedList`, etc.

---

### **Methods That Handle Individual Elements**
1. **`add(E element)`** → Adds an element (returns `true` if added).
2. **`remove(Object o)`** → Removes an element (returns `true` if removed).
3. **`contains(Object o)`** → Checks if an element exists.

#### **Example**
```java
Collection<String> strings = new ArrayList<>();
strings.add("one");
strings.add("two");
System.out.println(strings); // [one, two]
strings.remove("one");
System.out.println(strings); // [two]
```

---

### **Methods That Handle Collections**
1. **`containsAll(Collection<?> c)`** → Checks if all elements of `c` exist in this collection.
2. **`addAll(Collection<? extends E> c)`** → Adds all elements of `c` (may fail for Sets).
3. **`removeAll(Collection<?> c)`** → Removes elements in `c` from this collection.
4. **`retainAll(Collection<?> c)`** → Keeps only elements present in `c`.

#### **Example**
```java
Collection<String> strings = new ArrayList<>(List.of("one", "two", "three"));
Collection<String> first = List.of("one", "two");

System.out.println(strings.containsAll(first)); // true
strings.removeAll(first);
System.out.println(strings); // [three]
```

---

### **Methods That Handle the Collection Itself**
1. **`size()`** → Returns the number of elements.
2. **`isEmpty()`** → Checks if the collection is empty.
3. **`clear()`** → Removes all elements.

#### **Example**
```java
Collection<String> strings = new ArrayList<>(List.of("one", "two"));
System.out.println(strings.size()); // 2
strings.clear();
System.out.println(strings.isEmpty()); // true
```

---

### **Converting Collection to an Array**
- **`toArray()`** → Converts collection to an `Object[]` array.
- **`toArray(T[] a)`** → Converts to a typed array.
- **`toArray(IntFunction<T[]> generator)`** (Java 8) → Uses method reference.

#### **Example**
```java
Collection<String> strings = List.of("one", "two");
String[] array = strings.toArray(new String[0]);
System.out.println(Arrays.toString(array)); // [one, two]
```

---

### **Filtering Elements with a Predicate (Java 8)**
- **`removeIf(Predicate<? super E> filter)`** → Removes elements that match a condition.

#### **Example**
```java
Collection<String> strings = new ArrayList<>(List.of(null, "", "one", "two", ""));
strings.removeIf(s -> s == null || s.isEmpty());
System.out.println(strings); // [one, two]
```

---

### **Choosing an Implementation**
- **`ArrayList` (default choice)**: Fast access, ordered.
- **`HashSet`**: No duplicates, unordered.
- **`LinkedList`**: Good for frequent insertions/removals.

Would you like a deeper dive into **Lists vs Sets vs Queues** with performance comparisons?
